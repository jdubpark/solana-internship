import { Percentage } from '@orca-so/common-sdk'
import { PublicKey } from '@solana/web3.js'
import BN from 'bn.js'

/**
 * Parameters to increase liquidity for a position.
 *
 * @category Instruction Types
 * @param liquidityAmount - The total amount of Liquidity the user is willing to deposit.
 * @param tokenMaxA - The maximum amount of token A to add to the position.
 * @param tokenMaxB - The maximum amount of token B to add to the position.
 * @param globalpool - PublicKey for the globalpool that the position will be opened for.
 * @param position - PublicKey for the  position will be opened for.
 * @param positionTokenAccount - PublicKey for the position token's associated token address.
 * @param tokenOwnerAccountA - PublicKey for the token A account that will be withdrawed from.
 * @param tokenOwnerAccountB - PublicKey for the token B account that will be withdrawed from.
 * @param tokenVaultA - PublicKey for the tokenA vault for this globalpool.
 * @param tokenVaultB - PublicKey for the tokenB vault for this globalpool.
 * @param tickArrayLower - PublicKey for the tick-array account that hosts the tick at the lower tick index.
 * @param tickArrayUpper - PublicKey for the tick-array account that hosts the tick at the upper tick index.
 * @param positionAuthority - authority that owns the token corresponding to this desired position.
 */
export type IncreaseLiquidityParams = {
  globalpool: PublicKey
  position: PublicKey
  positionTokenAccount: PublicKey
  tokenOwnerAccountA: PublicKey
  tokenOwnerAccountB: PublicKey
  tokenVaultA: PublicKey
  tokenVaultB: PublicKey
  tickArrayLower: PublicKey
  tickArrayUpper: PublicKey
  positionAuthority: PublicKey
} & IncreaseLiquidityInput

/**
 * Input parameters to deposit liquidity into a position.
 *
 * This type is usually generated by a quote class to estimate the amount of tokens required to
 * deposit a certain amount of liquidity into a position.
 *
 * @param tokenMaxA - the maximum amount of tokenA allowed to withdraw from the source wallet.
 * @param tokenMaxB - the maximum amount of tokenB allowed to withdraw from the source wallet.
 * @param liquidityAmount - the desired amount of liquidity to deposit into the position/
 */
export type IncreaseLiquidityInput = {
  tokenMaxA: BN
  tokenMaxB: BN
  liquidityAmount: BN
}

/**
 * @param inputTokenAmount - The amount of input tokens to deposit.
 * @param inputTokenMint - The mint of the input token the user would like to deposit.
 * @param tokenMintA - The mint of tokenA in the Globalpool the user is depositing into.
 * @param tokenMintB -The mint of tokenB in the Globalpool the user is depositing into.
 * @param tickCurrentIndex - The Globalpool's current tickIndex
 * @param sqrtPrice - The Globalpool's current sqrtPrice
 * @param tickLowerIndex - The lower index of the position that we are withdrawing from.
 * @param tickUpperIndex - The upper index of the position that we are withdrawing from.
 * @param slippageTolerance - The maximum slippage allowed when calculating the minimum tokens received.
 */
export type IncreaseLiquidityQuoteParam = {
  inputTokenAmount: BN
  inputTokenMint: PublicKey
  tokenMintA: PublicKey
  tokenMintB: PublicKey
  tickCurrentIndex: number
  sqrtPrice: BN
  tickLowerIndex: number
  tickUpperIndex: number
  slippageTolerance: Percentage
}

export enum SwapDirection {
  AtoB = "Swap A to B",
  BtoA = "Swap B to A",
}

export enum AmountSpecified {
  Input = "Specified input amount",
  Output = "Specified output amount",
}

export enum PositionStatus {
  BelowRange,
  InRange,
  AboveRange,
}